---
title: "In Class Demo"
author: "Alan Arnholt"
date: last-modified
date-format: "[Last modified on] MMMM DD, YYYY HH:mm:ss zzz"
format: 
  html: default
  pdf: default
editor: visual
---

```{r label = "setup", include = FALSE}
library(knitr) #packages
library(DiagrammeR)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", comment = NA, message = FALSE,  warning = FALSE)
```

## Quarto

This is an Quarto document. For more details on using Quarto see <https://quarto.org/docs/guide/>.

When you click the **Render** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r label = "cars"}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r, echo=FALSE}
#| label: "fig-sp"
#| fig-cap: "This is a scatterplot of pressure versus temperature"
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.


## Using inline R code

```{r}
RN <- rnorm(1000, 2500, 8.7952)
(xbar <- mean(RN))
(S <- sd(RN))
```

The mean of `RN` is `r round(mean(RN),2)` and the standard deviation is `r round(sd(RN),2)`.

## Using $\LaTeX$

* Enclose between single dollar signs ($) for inline mathematics.
* Enclose between double dollar signs ($$) for display equations.

The following code `$\bar{x} = \frac{\sum_{i=1}^{n}x_i}{n}$` produces an inline definition of the mean: $\bar{x} = \frac{\sum_{i=1}^{n}x_i}{n}$.  To get a display equation for the mean, use `$$\bar{x} = \frac{\sum_{i=1}^{n}x_i}{n}$$`
$$\bar{x} = \frac{\sum_{i=1}^{n}x_i}{n}$$ to produce the output above.

* Your turn---Use $\LaTeX$ to write the definition of the sample variance ($s^2$).

$$s^2 = \frac{\sum_{i=1}^{n}(x_i - \bar{x})^2}{(n-1)}$$

```{r}
set.seed(27)
example <- c(5, 7, 9, 11, 13)
example
(xbar <- mean(example))
(v <- var(example))
(V <- sum((example - xbar)^2)/(length(example)-1))
DF <- data.frame(data = example, dmm = example - xbar, dmm2 = (example - xbar)^2)
DF
```




```{r}
library(tidyverse)
RND <- data.frame(x = RN)
head(RND)
ggplot(data = RND, aes(x = x, y = ..density..)) + 
  geom_histogram(color = "black", fill = "pink") + 
  geom_density() +
  theme_bw() 
```
## Three S's

1. Shape
2. Center
3. Spread

* Unimodal symmetric $\rightarrow$ use **mean** for center and **standard deviation** for spread.

* Unimodal Skewed (either left or right) $\rightarrow$ use **median** for center and **IQR** for spread.


```{r}
n <- 10000
sr <- rexp(n, .001)
us <- rnorm(n, 100, 15)
```

* Characterize the distribution of `sr` and `us`.  Note: If you use `ggplot2` you need to pass a data frame or tibble as the first argument to your data.

```{r}
# Using Base R
hist(sr)
md <- median(sr)
iqr <- IQR(sr)
c(md, iqr)
# Using tidyverse
DF <- data.frame(x = sr)
ggplot(data = DF, aes(x = x)) + 
  geom_histogram()
DF %>% 
  summarize(Md = median(x), iqr = IQR(x)) -> tva
tva
```

The distribution of `sr` is unimodal and skewed to the right with a center at the median which is `r median(sr)`, and a spread of (IQR = `r IQR(sr)`).

## Data

```{r}
library(nycflights13)
# ?flights
str(flights)
```

```{r}
ggplot(data = flights, aes(x = air_time)) + 
  geom_density() + 
  facet_wrap(vars(carrier)) + 
  theme_bw()
```


```{r}
library(gapminder)
str(gapminder)
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + 
  geom_point() + 
  theme_bw()
#
ggplot(data = gapminder, 
       aes(x = gdpPercap, y = lifeExp, color = continent)) + 
  geom_point() + 
  theme_bw()
#
ggplot(data = gapminder, 
       aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) + 
  geom_point() + 
  theme_bw()
```


```{r}
ggplot(data = gapminder, 
       aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) + 
          geom_point() + 
          theme_bw() + 
          xlim(0, 6000) +
          xlab("GDP per capita") +
          ylab("Life Expectancy (in years)")

```

## Five named graphs 

______________

1. scatterplots
2. linegraphs
3. boxplots
4. histograms
5. barplots

_______________

```{r}
alaska_flight <- flights %>% 
  filter(carrier == "AS")
ggplot(data = alaska_flight, 
       aes(x = dep_delay, y = arr_delay)) + 
  geom_point()
#
ggplot(data = alaska_flight, 
       aes(x = dep_delay, y = arr_delay)) + 
        geom_point(alpha = 0.2, color = "blue") + 
        theme_bw()
#
ggplot(data = alaska_flight, 
       aes(x = dep_delay, y = arr_delay)) + 
        geom_jitter(alpha = 0.2, color = "blue") + 
        theme_bw()
```

________________

## Linegraphs via `geom_line()`

```{r}
early_january_weather <- weather %>% 
  filter(origin == "EWR", month ==1, day <= 15)
ggplot(data = early_january_weather, aes(x = time_hour, y = temp)) + 
  geom_line() + 
  theme_bw()
```

## Histograms

```{r}
ggplot(data = weather, aes(x = temp)) + 
  geom_histogram()
#
ggplot(data = weather, aes(x = temp)) + 
  geom_histogram(color = "black", fill = "lightblue") + 
  theme_bw() + 
  xlab("Temperature in Degrees Fahrenheit")
#
ggplot(data = weather, aes(x = temp)) + 
  geom_histogram(color = "black", fill = "lightblue", binwidth = 3) + 
  theme_bw() + 
  xlab("Temperature in Degrees Fahrenheit")
#
ggplot(data = weather, aes(x = temp)) + 
  geom_histogram(color = "black", fill = "lightblue", binwidth = 3) + 
  theme_bw() + 
  xlab("Temperature in Degrees Fahrenheit") + 
  facet_wrap(vars(month))
```

## Boxplots

```{r}
ggplot(data = weather, aes(y = temp)) + 
  geom_boxplot()

#
ggplot(data = weather, aes(y = temp, x= factor(month))) + 
  geom_boxplot() + 
  theme_bw()
```
______________________

## Barplots

```{r}
ggplot(data = flights, aes(x = carrier)) + 
  geom_bar(fill = "purple", color = "black") + 
  theme_bw()
```

```{r}
xtabs(~carrier, data = flights)
# Or 
table(flights$carrier)
```

```{r}
ggplot(data = flights, aes(x = carrier, fill = origin)) + 
  geom_bar(color = "black") + 
  theme_bw()
#
ggplot(data = flights, aes(x = carrier, fill = origin)) + 
  geom_bar(color = "black", position = "dodge") + 
  theme_bw()
```

## Data Wrangling

```{r}
alaska_flights <- flights %>% 
  filter(carrier == "AS")
portland_flights <- flights %>% 
  filter(dest == "PDX")
```

```{r}
many_airports <- flights %>% 
  filter(dest == "SEA" | dest == "SFO" | dest == "PDX" |
         dest == "BTV" | dest == "BDL")
dim(many_airports)

many_airports2 <- flights %>% 
  filter(dest %in% c("SEA", "SFO", "PDX", "BTV", "BDL"))
dim(many_airports2)
```

```{r}
summary_weather <- weather %>% 
  summarize(M = mean(temp), S = sd(temp))
summary_weather
```

```{r}
summary_weather <- weather %>% 
  summarize(M = mean(temp, na.rm = TRUE), S = sd(temp, na.rm = TRUE))
summary_weather
```

```{r}
summary_monthly_temp <- weather %>% 
  group_by(month) %>% 
  summarize(M = mean(temp, na.rm = TRUE), S = sd(temp, na.rm = TRUE))
summary_monthly_temp
```

## Mutate

```{r}
head(weather)
weather <- weather %>% 
  mutate(temp_in_C = (temp - 32)/1.8 )
head(weather)
```

## Arrange

```{r}
freq_dest <- flights %>% 
  group_by(dest) %>% 
  summarize(num_flights = n())
freq_dest
```

```{r}
freq_dest %>% 
  arrange(num_flights)
```

```{r}
freq_dest %>% 
  arrange(desc(num_flights))
```

```{r}
library(PASWR2)
head(EPIDURAL)
```

```{r}
xtabs(~ease + treatment, data = EPIDURAL)
table(EPIDURAL$ease, EPIDURAL$treatment)
EPIDURAL %>% 
  group_by(ease, treatment) %>%
  summarize(MOC = mean(oc, na.rm = TRUE), Number = n()) 
```

